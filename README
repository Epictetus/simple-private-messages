= Simple Private Messages

This plugin provides basic private messaging functionality for members of a
particular model. It's not big on features but the idea is that it's very
simple and light on resources.

It's not bound to specific model names and plays nice with will_paginate.

= Setup

First create the private message model by running the private_message_model
generator, passing the name you want to use for the message model.

  ./script/generate private_message_model Message

Now look in your new model and customise the "is_private_message" declaration's
:class_name value to the name of your model which will have messages. If this
class is User, this can be omitted as it is the default.

Finally, add the following entry to the model which will have the messages

  has_private_messages :class_name => Message

If you have used "Message" then that is the default and it need not be
specified.

= Usage

Examples assume you're using restful authentication or AAA, with a user model
of User and message model of Message.

== Creating / sending a message:

  frank = User.find_by_login("frank")
  george = User.find_by_login("george")

  message = Message.new
  message.subject = "Happy Festivus, son"
  message.body = "It's time for the Feats of Strength."
  message.sender = frank
  message.recipient = george
  message.save

== Reading a message

  message = Message.read(id, user)
  
Returns the message of the chosen id and ensures the passed user is either the
sender or the recipient. If unread, it checks to see if the passed user is the
recipient and if so marks the read_at timestamp.

You can also check if a message has been read with the following:

  message.read?

== Retrieving a user's received mail

  babu = User.find_by_login("babu")
  babu.received_messages

The following will return Babu's number of unread messages:

  babu.unread_message_count
  
Or the following for true or false on whether there are unread messages:

  babu.unread_messages?
  
== Retrieving a user's sent mail

  babu = User.find_by_login("babu")
  babu.sent_messages
  
== Custom finds

  babu.sent_messages.find(:all,
                          :conditions => ["read_at < ?", 2.days.ago],
                          :limit => 20, :order => "created_at ASC")

== Deleting a message

  babu = User.find_by_login("babu")
  message = babu.received_messages.find(3)
  message.mark_deleted(babu)
  
This will look at a message and mark it read by the sender or recipient,
based on whichever Babu is. It now won't appear in Babu's sent or received
messages.

  immigration = User.find_by_login("immigration")
  message = immigration.sent_messages.find(3)
  message.mark_deleted

Now that both sender and recipient have marked the message deleted, it now
gets destroyed. Should a message be sent to oneself, it will be deleted
immediately when marked deleted, as the sender and recipient are both
the same.

= Scaffold

A generator is included to create a basic controller and set of views. It
works on the assumption that the parent model is a user and should work out
of the box with Restful Authentication.

Run the following generator passing the name of the model you just created
and you'll get a basic controller and set of views. By convention, the
controller will be given a name of the plural of that of the model.

  ./script/generate private_message_scaffold Message

After that you need to add the resource to your routes.rb as a nested resource
of the users controller, with a collection for the delete_selected action.

  map.resources :users do |users|
    users.resources :messages, :collection => { :delete_selected => :post }
  end

Then uncomment the entry at the top of the message model to establish the
:to accessor.

You should now have working messaging.

=== Bug reports / suggestions

www.professionalnerd.com / "jonYADAYADAprofessionalnerd.com".gsub(/YADAYADA/, "@")

=== License

Copyright (c) 2007 Jon Gilbraith released under the MIT license
http://en.wikipedia.org/wiki/MIT_License